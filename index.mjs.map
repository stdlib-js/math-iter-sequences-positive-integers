{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 50\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants-float64-max-safe-integer' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a positive integer sequence.\n*\n* ## Notes\n*\n* -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.\n*\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.iter=9007199254740991] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterPositiveIntegersSeq();\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\nfunction iterPositiveIntegersSeq( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar i;\n\n\topts = {\n\t\t'iter': FLOAT64_MAX_SAFE_INTEGER\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': i,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPositiveIntegersSeq( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterPositiveIntegersSeq;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a positive integer sequence.\n*\n* @module @stdlib/math-iter-sequences-positive-integers\n*\n* @example\n* var iterPositiveIntegersSeq = require( '@stdlib/math-iter-sequences-positive-integers' );\n*\n* var iter = iterPositiveIntegersSeq();\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n"],"names":["isPlainObject","require$$0","hasOwnProp","require$$1","isNonNegativeInteger","require$$2","isPrimitive","format","require$$3","setReadOnly","iteratorSymbol","FLOAT64_MAX_SAFE_INTEGER","validate","opts","options","iter","TypeError","main","iterPositiveIntegersSeq","FLG","err","i","arguments","length","next","end","factory","done","value","lib"],"mappings":";;ipBAsBA,IAAIA,EAAgBC,EAChBC,EAAaC,EACbC,EAAuBC,EAAmDC,YAC1EC,EAASC,EAwCb,IC3CIC,EAAcR,EACdS,EAAiBP,EACjBQ,EAA2BN,EAC3BO,EDwBJ,SAAmBC,EAAMC,GACxB,OAAMd,EAAec,GAGhBZ,EAAYY,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdX,EAAsBU,EAAQC,OAC5B,IAAIC,UAAWT,EAAQ,2EAA4E,OAAQO,EAAQC,OAGrH,KARC,IAAIC,UAAWT,EAAQ,qEAAsEO,KCwFtG,IAAAG,EAlFA,SAASC,EAAyBJ,GACjC,IAAID,EACAE,EACAI,EACAC,EACAC,EAKJ,GAHAR,EAAO,CACNE,KAAQJ,GAEJW,UAAUC,SACdH,EAAMR,EAAUC,EAAMC,IAErB,MAAMM,EAcR,OAXAC,EAAI,EAIJZ,EADAM,EAAO,GACY,OAAQS,GAC3Bf,EAAaM,EAAM,SAAUU,GAGxBf,GACJD,EAAaM,EAAML,EAAgBgB,GAE7BX,EAQP,SAASS,IAER,OADAH,GAAK,EACAF,GAAOE,EAAIR,EAAKE,KACb,CACNY,MAAQ,GAGH,CACNC,MAASP,EACTM,MAAQ,GAWV,SAASF,EAAKG,GAEb,OADAT,GAAM,EACDG,UAAUC,OACP,CACNK,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,GAUV,SAASD,IACR,OAAOR,EAAyBL,KCnFlCgB,EALe5B"}